name: dotnet-release

on:
  push:
    tags:
      - v**

env:
  dotnet-version: '8.0.x'
  project-name: PwshGen

jobs:
  win-x64-release:
    runs-on: windows-latest
    steps:
        - uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: ${{ env.dotnet-version }}
        - name: Install project dependencies
          run: dotnet restore
        - run: mkdir \app \arm
        - name: Compile x64 exectuable
          run: dotnet publish -r win-x64 -c Release -o \app\ ${{ env.project-name }}.csproj
        - name: Compile arm64 exectuable
          run: dotnet publish -r win-arm64 -c Release -o \arm\ ${{ env.project-name }}.csproj
        - name: Zip x64 executable
          shell: Powershell
          run: Compress-Archive -Path D:\app\ -Destination win-x64.zip
        - name: Zip arm64 executable
          shell: Powershell
          run: Compress-Archive -Path D:\arm\ -Destination win-arm64.zip
        - name: Upload windows x64 zip artifact
          uses: actions/upload-artifact@v4
          with:
            name: win-x64.zip
            path: win-x64.zip
        - name: Upload windows arm64 zip artifact
          uses: actions/upload-artifact@v4
          with:
            name: win-arm64.zip
            path: win-arm64.zip


  macos-x64-release:
    runs-on: macos-latest
    steps:
        - uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: ${{ env.dotnet-version }}
        - name: Install project dependencies
          run: dotnet restore
        - run: sudo mkdir -p ~/app ~/arm
        - name: Compile x64 exectuable
          run: sudo dotnet publish -r osx-x64 -c Release -o ~/app/ ${{ env.project-name }}.csproj
        - name: Compile arm64 exectuable
          run: sudo dotnet publish -r osx-arm64 -c Release -o ~/arm/ ${{ env.project-name }}.csproj
        - name: Zip x64 executable
          shell: Powershell
          run: Compress-Archive -Path ~/app/* -Destination macos-x64.zip
        - name: Zip ARM executable
          shell: Powershell
          run: Compress-Archive -Path ~/arm/* -Destination macos-arm64.zip
        - name: Upload macos x64 zip artifact
          uses: actions/upload-artifact@v4
          with:
            name: macos-x64.zip
            path: macos-x64.zip
        - name: Upload macos arm64 zip artifact
          uses: actions/upload-artifact@v4
          with:
            name: macos-arm64.zip
            path: macos-arm64.zip

  linux-x64-release:
    runs-on: ubuntu-latest
    needs: [ win-x64-release, macos-x64-release ]
    steps:
        - uses: actions/checkout@v4
        - name: Setup dotnet
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: ${{ env.dotnet-version }}
        - name: Install project dependencies
          run: dotnet restore
        - name: Install dotnet AOT dependencies
          run: |
            sudo apt-get update \
            && sudo apt-get install -y --no-install-recommends \
            clang zlib1g-dev
        - run: sudo mkdir ~/app ~/arm64 ~/arm ~/musl
        - name: Compile x64 exectuable
          run: sudo dotnet publish -r linux-x64 -c Release -o ~/app/ ${{ env.project-name }}.csproj
        - name: Compile arm64 exectuable
          run: sudo dotnet publish -r linux-arm64 -c Release -o ~/arm64/ ${{ env.project-name }}.csproj
        - name: Compile arm exectuable
          run: sudo dotnet publish -r linux-arm -c Release -o ~/arm/ ${{ env.project-name }}.csproj
        - name: Compile musl-targeted x64 exectuable
          run: sudo dotnet publish -r linux-musl-x64 -c Release -o ~/musl/ ${{ env.project-name }}.csproj
        - name: Zip x64 executable
          run: zip -r linux-x64.zip ~/app/
        - name: Zip arm64 executable
          run: zip -r linux-arm64.zip ~/arm64/
        - name: Zip arm executable
          run: zip -r linux-arm.zip ~/arm/
        - name: Zip musl executable
          run: zip -r linux-musl.zip ~/musl/
        - name: Download All Artifacts
          uses: actions/download-artifact@v4
        - name: Release
          uses: softprops/action-gh-release@v2
          if: startsWith(github.ref, 'refs/tags/')
          with:
            name: ${{ github.ref_name }}
            token: ${{ secrets.RELEASE_TOKEN }}
            generate_release_notes: true
            files: |
              *.zip
              */*.zip
        - name: Delete artifacts
          uses: geekyeggo/delete-artifact@v5
          if: always()
          with:
            name: |
              win-x64.zip
              win-arm64.zip
              macos-x64.zip
              macos-arm64.zip
